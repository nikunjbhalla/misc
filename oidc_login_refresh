import time
import requests
from IPython.display import display, HTML

# Configuration
authorization_endpoint = 'https://your-authorization-endpoint.com'
token_endpoint = 'https://your-token-endpoint.com'
client_id = 'your-client-id'
client_secret = 'your-client-secret'
redirect_uri = 'http://localhost:8000/callback'  # Replace with your callback URL
scope = 'openid profile email'

access_token = None
expires_in = None
refresh_token = None

def perform_initial_authentication():
    global access_token, expires_in, refresh_token
    
    # Step 1: Authorization Request
    authorization_params = {
        'response_type': 'code',
        'client_id': client_id,
        'redirect_uri': redirect_uri,
        'scope': scope
    }

    authorization_url = f'{authorization_endpoint}?{"&".join([f"{k}={v}" for k, v in authorization_params.items()])}'

    display(HTML(f'Please log in by visiting the following URL:<br><a href="{authorization_url}" target="_blank">{authorization_url}</a>'))

    # Step 2: Create a simple web server for the callback URL
    from http.server import BaseHTTPRequestHandler, HTTPServer

    # Callback handler
    class CallbackHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()

            # Extract the authorization code from the callback URL
            authorization_code = self.path.split('code=')[1]

            # Step 3: Token Request
            token_data = {
                'grant_type': 'authorization_code',
                'code': authorization_code,
                'client_id': client_id,
                'client_secret': client_secret,
                'redirect_uri': redirect_uri
            }

            response = requests.post(token_endpoint, data=token_data)

            # Handle the token response
            if response.status_code == 200:
                token_response = response.json()
                access_token = token_response['access_token']
                expires_in = token_response['expires_in']
                refresh_token = token_response['refresh_token']

                # Use the access token and refresh token in your application as needed
                print(f'Access Token: {access_token}')
                print(f'Expires In: {expires_in}')
                print(f'Refresh Token: {refresh_token}')
            else:
                error_message = response.json().get('error_description', 'Token request failed')
                print(f'Token request failed: {error_message}')

    # Start the server for the callback URL
    def run_server(server_class=HTTPServer, handler_class=CallbackHandler, port=8000):
        server_address = ('', port)
        httpd = server_class(server_address, handler_class)
        print('Starting server...')
        httpd.handle_request()

    run_server()

def refresh_access_token():
    global access_token, expires_in
    
    # Step 4: Token Refresh Request
    token_data = {
        'grant_type': 'refresh_token',
        'refresh_token': refresh_token,
        'client_id': client_id,
        'client_secret': client_secret
    }

    response = requests.post(token_endpoint, data=token_data)

    # Handle the token response
    if response.status_code == 200:
        token_response = response.json()
        access_token = token_response['access_token']
        expires_in = token_response['expires_in']
        
        #Update the access token and expiration time in your application's state or storage
        # Example: update_access_token(access_token, expires_in)
        
        print(f'Access Token Refreshed: {access_token}')
        print(f'Expires In: {expires_in}')
    else:
        error_message = response.json().get('error_description', 'Token refresh failed')
        print(f'Token refresh failed: {error_message}')

def setup_token_refresh():
    perform_initial_authentication()

    # Start a loop to continuously check if the token has expired
    while True:
        current_time = int(time.time())

        # Check if the token has expired
        if current_time >= expires_in:
            refresh_access_token()

        # Sleep for a certain interval before checking again
        time.sleep(60)  # Sleep for 1 minute before checking again

# Call the setup function to start the token refresh mechanism
setup_token_refresh()
