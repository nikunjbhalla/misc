import java.util.ArrayList;
import java.util.List;

public class SimpleIntegerListEncoderDecoder {

    public static List<Integer> encodeText(String text) {
        // Assuming you have your encoding logic here using com.knuddels.jtokkit.api.Encoding
        // For this example, let's simulate encoding by converting words to integers
        List<Integer> tokens = tokenizeText(text);
        return tokens;
    }

    public static String decodeTokens(List<Integer> tokens) {
        // Assuming you have your decoding logic here using com.knuddels.jtokkit.api.Encoding
        // For this example, let's simulate decoding by converting integers back to words
        StringBuilder decodedText = new StringBuilder();
        for (Integer token : tokens) {
            decodedText.append(token).append(" ");
        }
        return decodedText.toString().trim();
    }

    public static List<Integer> tokenizeText(String text) {
        // Split the text based on common sentence-ending punctuation marks
        String[] sentences = text.split("[.!?]");
        List<Integer> tokens = new ArrayList<>();

        for (String sentence : sentences) {
            // Tokenize each sentence into integers (you can use your encoding logic here)
            String[] words = sentence.trim().split("\\s+");
            for (String word : words) {
                // Simulating encoding by converting words to integers
                int encodedToken = word.hashCode(); // Replace with your actual encoding logic
                tokens.add(encodedToken);
            }
        }

        return tokens;
    }

    public static List<List<Integer>> splitTextIntoChunks(List<Integer> tokens, int maxTokensPerChunk) {
        List<List<Integer>> chunks = new ArrayList<>();

        for (int i = 0; i < tokens.size(); i += maxTokensPerChunk) {
            int endIndex = Math.min(i + maxTokensPerChunk, tokens.size());
            List<Integer> chunk = tokens.subList(i, endIndex);
            chunks.add(chunk);
        }

        return chunks;
    }

    public static void main(String[] args) {
        String inputText = "Your large input text here. Another sentence? Yes! Yet another.";
        int maxTokensPerChunk = 512;

        // Encode the text
        List<Integer> encodedTokens = encodeText(inputText);

        // Split the encoded tokens into chunks
        List<List<Integer>> tokenChunks = splitTextIntoChunks(encodedTokens, maxTokensPerChunk);

        // Decode each chunk and reconstruct the original text
        StringBuilder reconstructedText = new StringBuilder();
        for (List<Integer> chunk : tokenChunks) {
            String decodedChunk = decodeTokens(chunk);
            reconstructedText.append(decodedChunk).append(" ");
        }

        System.out.println("Original Text: " + inputText);
        System.out.println("Reconstructed Text: " + reconstructedText.toString().trim());
    }
}
