from flask import Flask, Request

app = Flask(__name__)

class MockRequestContext:
    def __init__(self, headers=None):
        self.headers = headers or {}

    def __enter__(self):
        self._original_request = app.request_context(environ={
            'HTTP_USER_AGENT': self.headers.get('User-Agent', ''),
            'HTTP_ACCEPT_LANGUAGE': self.headers.get('Accept-Language', ''),
            # Add more headers here as needed
        })
        self._original_request.push()

    def __exit__(self, exc_type, exc_value, traceback):
        self._original_request.pop()



from mock_request import MockRequestContext
from flask import Flask

app = Flask(__name__)

# Create a function that uses the mock request
def use_mock_request():
    with MockRequestContext(headers={'User-Agent': 'My User Agent'}):
        from flask import request

        # Now you can use 'request' as if it's the actual Flask request object
        user_agent = request.headers.get('User-Agent')
        print(f"User-Agent from mock request: {user_agent}")

# Call the function
if __name__ == '__main__':
    use_mock_request()

